{"meta":{"title":"记录生活点滴","subtitle":"付出就会有收获","description":"人生苦短","author":"mino","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-01-09T10:19:18.000Z","updated":"2018-01-13T09:36:34.033Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"linuxpythonnodeshellvuedocker"},{"title":"categories","date":"2018-01-09T10:07:39.000Z","updated":"2018-01-09T13:09:34.883Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"process","date":"2018-01-22T06:23:43.000Z","updated":"2018-01-22T06:23:43.967Z","comments":true,"path":"process/index.html","permalink":"http://yoursite.com/process/index.html","excerpt":"","text":""}],"posts":[{"title":"process for python","slug":"process","date":"2018-01-22T06:23:43.000Z","updated":"2018-02-01T11:12:18.828Z","comments":true,"path":"2018/01/22/process/","link":"","permalink":"http://yoursite.com/2018/01/22/process/","excerpt":"","text":"多进程—basepython中的多线程其实并不是真正的多线程，如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。Python提供了非常好用的多进程包multiprocessing，只需要定义一个函数，Python会完成其他所有事情。借助这个包，可以轻松完成从单进程到并发执行的转换。multiprocessing支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。 1.请看下面的代码实例： import sys reload(sys) sys.setdefaultencoding(&quot;utf-8&quot;) from multiprocessing import Process import os import time def task(name): print &quot;child process name is %s with process_id is %s start&quot;%(name,os.getpid()) time.sleep(2) print &quot;child process name is %s with process_id is %s end&quot;%(name,os.getpid()) if __name__ == &apos;__main__&apos;: print &apos;Parent process_id is %s&apos;%os.getpid() # start child process p=Process(target=task,args=(&apos;mino&apos;,)) print &quot;process start&quot; p.start() p.join() # main process wait childprocess print &quot;process end&quot; 其实上面的代码要做任务是获取进程的pid然后休眠2秒再打印出进程的pid.主方法中除了有主进程之外，还new了一个新的进程。让新的进程去处理任务。主进程首先获取到主进程的pid然后再执行子进程。p.join()方法是主进程必须等待子进程执行完毕，才能继续执行下面的代码。 2.接着看下面的实例，创建进程池的逻辑。 # -*-coding:utf-8 -*- import sys reload(sys) sys.setdefaultencoding(&quot;utf-8&quot;) import os,time from multiprocessing import Pool def task(name,time_sleep): print &quot;child process name is %s with p_id is %s start&quot;%(name,os.getpid()) time.sleep(time_sleep) print &quot;child process name is %s with p_id is %s end&quot;%(name,os.getpid()) if __name__ == &apos;__main__&apos;: print &quot;parent_processId is %s&quot;%os.getpid() # create process pool p=Pool(4) # 2 6.2 3 5.3 4 4.2 for i in xrange(5): # apply_task for pool p.apply_async(task,args=(&quot;mino&quot;+str(i),i)) print &quot;child process are running&quot; p.close() p.join() print &quot;all process end&quot; 利用进程池可以一次性创建多个进程。p=Pool()是创建进程池的方法。p.apply_async()是给每个进程附件异步执行的方法。这里是创建4个进程的容器，每个子进程执行的任务都是获取打印进程的pid然后休眠几秒再打印子进程的pid.主进程等待子进程都执行完毕之后，再去执行后面的逻辑。 3.接着请看下面的逻辑创建读写队列和进程锁 --coding:utf-8 --import sys reload(sys) sys.setdefaultencoding(&apos;utf-8&apos;) from multiprocessing import Process,Queue,Lock import time,os,random def write(q,lock,name): print &apos;child process %s start&apos;%name #acquire lock lock.acquire() for data in [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;]: print &apos;put value %s to queen&apos;%data q.put(data) time.sleep(random.random()) #release lock lock.release() print &apos;child process %s end&apos;%name def read(q,lock,name): print &quot;read process %s start&quot;%name while True: value=q.get() #print value print &apos;get vlue %s from queue&apos;%value print &quot;read process %s end&quot;%name if __name__ == &apos;__main__&apos;: lock=Lock() q=Queue() pwiter=Process(target=write,args=(q,lock,&apos;write&apos;)) pread=Process(target=read,args=(q,lock,&apos;read&apos;)) pwiter.start() pread.start() pwiter.join() pread.terminate() print &quot;main process finish&quot; 主进程首先创建全局变量lock,和queue,然后创建写和读的进程。当子进程再写入内容填，必须加锁，保证同一时间只能有一个进程操作写的动作。将数据放入队列之后.释放锁。而负责读的进程从队列中读取数据，读进程是不需要加锁的，直接再队列中取数据。读写进程都执行完之后（读进程不会终止，需要调用pread.tearminate()才能终止），接着执行下面的逻辑。 参考内容 subprocess官方模块 python单进程与多进程效率的对比","categories":[],"tags":[{"name":"多进程","slug":"多进程","permalink":"http://yoursite.com/tags/多进程/"}]},{"title":"md操作","slug":"index","date":"2018-01-13T09:14:56.000Z","updated":"2018-01-13T09:25:58.572Z","comments":true,"path":"2018/01/13/index/","link":"","permalink":"http://yoursite.com/2018/01/13/index/","excerpt":"","text":"欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","categories":[],"tags":[]},{"title":"centos","slug":"centos1","date":"2018-01-08T08:37:05.000Z","updated":"2018-01-08T09:25:06.197Z","comments":true,"path":"2018/01/08/centos1/","link":"","permalink":"http://yoursite.com/2018/01/08/centos1/","excerpt":"","text":"centos上使用yum 命令时有下面的错误信息another app is currently holding the yum lock;waiting for it to exit 解决办法：可以强制关闭yum 进程rm -f /var/run/yum.pid 查看用yum安装的包yum list installed centos上检查某软件包是否已经安装1、rpm(RedHat Package Manager)包安装的，可以用rpm -qa看到，如果要查找某软件包是否安装，用 rpm -qa | grep “软件或者包的名字”。 2、以deb包安装的，可以用dpkg -l能看到。如果是查找指定软件包，用dpkg -l | grep “软件或者包的名字”； 3、yum方法安装的，可以用yum list installed查找，如果是查找指定包，命令后加 | grep “软件名或者包名”； 4、如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了，上面两种方法都看不到这种源码形式安装的包。如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。 附加： Linux rpm包集合 rpm使用","categories":[],"tags":[{"name":"centos yum","slug":"centos-yum","permalink":"http://yoursite.com/tags/centos-yum/"}]},{"title":"readme","slug":"readme","date":"2018-01-05T14:18:21.000Z","updated":"2018-01-08T08:06:01.864Z","comments":true,"path":"2018/01/05/readme/","link":"","permalink":"http://yoursite.com/2018/01/05/readme/","excerpt":"","text":"一.虚拟机1.检查操作系统CentOS 7.2 64位或 RHEL7.2 64位以上，选择标准化安装（不能用最小化安装）最小化安装时安装缺失的包（base\\web server\\kexec-tools） 2.检查yum源，如果没有进行配置 3.检查所有机器的root账号密码需要统一，建立sudo权限的非root账号密码 4.检查所有机器关闭防火墙 重启不失效 5.检查所有机器关闭selinux 并且保证重启后不失效 6.检查所有机器网卡名需要保持统一 7.检查所有机器的ipfowad4处于开启状态并且保证重启后不失效 8.检查部署机上是否上传了镜像，如果上传了镜像计算比对md5 9.所有机器配置有规律的主机名 如mw1-mw8 二.物理机虚拟机需要下面的额外检查： 1.检查是否配置好一个独立VLAN（检查这个VLAN里面除了网关，其它IP是否被占用）；检查这个VLAN要和物理机不在同一个VLAN，要跟里外物理机都能连通。 2.检查查看交换机配置，与服务器接口配置需为trunk口且允许物理机vlan和docker段vlan通过 3.物理服务器的网卡配置tag模式 具体详见下面说明 网络连通性的保证，如没有打tag，网络不通 Center OS 7.2 网卡配置VLAN TAG 3.1、确认内核是否已经载入802.1q模组: lsmod|grep 8021q，如果没有使用一下命令将模组载入内核：modprobe -a 8021q 3.2、vi打开/etc/sysconfig/network-scripts/ifcfg-bondX删除对应bond的IP和dns配置信息，保存 3.3、创建vlan网卡配置文件，(例如创建服务器网段vlan1199)：cp一个原bond网卡配置命名为bond0.1199，vi修改内容如下， 增加一行 VLAN=yes 修改DEVICE=bond0.1199 配置IP、掩码、网关 完成后重启网络 service network restart 查看vlan配置 cat /proc/net/vlan/config 有对应的dev name和vlanid即可 ping网络是否通，ping自身网关是否通，ping docker段vlan网关是否通，ping NTP服务器是否通。 4.检查物理机的磁盘不小于2.4TB，数据盘采用RAD10模式的磁盘阵列","categories":[],"tags":[{"name":"工具开发需求","slug":"工具开发需求","permalink":"http://yoursite.com/tags/工具开发需求/"}]},{"title":"pyexcept","slug":"pyexcept","date":"2017-11-11T14:18:21.000Z","updated":"2018-01-08T08:06:07.944Z","comments":true,"path":"2017/11/11/pyexcept/","link":"","permalink":"http://yoursite.com/2017/11/11/pyexcept/","excerpt":"","text":"为了增强程序的健壮性，管理运行时预见的错误—–异常1. 错误是程序不能执行 一般包括语法错误和逻辑错误 2. 异常是程序出现了错误，而在正常控制流以外采取的措施 - 异常处理的过程一般有两步，引发异常和处理异常 - 处理异常 一般是直接pass或者执行一场之后的逻辑 Python常见的异常 NameError 当调用一个没有定义的变量时解释器出现的异常&gt;&gt;&gt; a Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; NameError: name &apos;a&apos; is not defined ZeroDivisionError 除数为0的error SyntaxError Python解释器语法错误 indexError 序列的索引超标 keyError 字典的键问题，字典中不存在键 IOError 文件的异常，没有文件或者打开异常 AttributeError 属性异常对象中没有属性 ##异常的处理 try-except 如果try通过不执行except里面的逻辑 try-finally 不管try有没有通过都要执行finally里面的代码 try-except-finally try-except-else-finally 例子 返回浮点型def safe_float(obj): try: return float(obj) except ValueError, e: return &apos;ValueError&apos;, e except TypeError, e: return &apos;TypeError&apos;, e F:\\Python2\\python.exe F:/pycode/Error/handle_error.py (&apos;TypeError&apos;, TypeError(&apos;float() argument must be a string or a number&apos;,)) (&apos;ValueError&apos;, ValueError(&apos;could not convert string to float: xxxx&apos;,)) 捕获多处异常和异常参数def safe_float1(obj): try: return float(obj) except (TypeError, ValueError), dig: print type(dig) print dig return str(dig) &lt;type &apos;exceptions.TypeError&apos;&gt; float() argument must be a string or a number float() argument must be a string or a number","categories":[],"tags":[{"name":"异常处理","slug":"异常处理","permalink":"http://yoursite.com/tags/异常处理/"}]},{"title":"python启动定时任务","slug":"Timer","date":"2017-10-31T11:36:30.000Z","updated":"2018-01-08T06:31:32.560Z","comments":true,"path":"2017/10/31/Timer/","link":"","permalink":"http://yoursite.com/2017/10/31/Timer/","excerpt":"","text":"python启动定时任务1.time模块time.sleep(n)例如下面的例子1234def work(n): - 每隔n 秒 输出 1到10之间的一个数 for i in range(10): print i time.sleep(n) 上面的实例是阻塞的，在sleep的时间内程序一直堵塞详情请参考官方文档—–time.sleep 2.sched 模块1234567891011121314151617181920212223 1.导入sched模块 import sched---------------------------------------------------------------------------------- 2.创建scheduler对象 s = sched.scheduler(time.time, time.sleep) - time.time:返回时间戳的函数 - time.sleep:可以在定时未到达之前阻塞------------------------------------------------------------------------------------ 3.定义要执行的任务 def worker(n): pass------------------------------------------------------------------------------------- 4.将任务添加到scheduler的盒子中 s.enter(delay,priority,action,arguments) - delay:int /float型的表示多少秒后执行这个action任务 - priority:优先级表示当多个任务同时在一个时刻将执行优先执行那个任务 0优先级最高，数字越小优先级越高 - action: 执行的任务在上面的例子中也就是函数名worker - arguments:参数列表以元组的形式如：(n,) 如果没有参数传入直接传空括号()-------------------------------------------------------------------------------------- 5.运行任务 s.run() 在多线程环境中由于线程全局锁安全，一个任务没结束，就要等待也是阻塞的详细请查看官方库—-sched 3.threading.Timer()为了解决上面的阻塞问题，再多线程的环境中能够并发执行12345678910111213 1.导入模块 from threading import Timer---------------------------------------------------------------------------------------- 2.定义要执行的任务 def work(arg): pass---------------------------------------------------------------------------------------- 3.启动执行 Timer(delay, work, (arg)).start() - 不需要区分优先级可以同时执行任务delay相同时就同时执行任务 - delay:int /float型的表示多少秒后执行这个work任务 - work: 执行任务的方法名字 - arg:参数列表元祖(arg,)如果没有就是() 详情请参考官方文档：threading.Timer 4.更加高级的任务调度框架 apscheduler 官方文档 查看12345678910111213 1.导入模块 from apscheduler.schedulers.blocking import BlockingScheduler 2.初始化一个任务实例 sched = BlockingScheduler() 3.添加作业任务 sched.add_job(my_job, &apos;interval&apos;, seconds=5)- my_job：作业任务-‘ interval ’ ‘cron ’等等4.启动任务 sched.start()","categories":[],"tags":[{"name":"python启动定时任务","slug":"python启动定时任务","permalink":"http://yoursite.com/tags/python启动定时任务/"}]},{"title":"blue","slug":"blue","date":"2017-10-29T15:06:44.000Z","updated":"2018-01-08T10:24:18.568Z","comments":true,"path":"2017/10/29/blue/","link":"","permalink":"http://yoursite.com/2017/10/29/blue/","excerpt":"","text":"引入图片","categories":[],"tags":[{"name":"引入图片","slug":"引入图片","permalink":"http://yoursite.com/tags/引入图片/"}]},{"title":"知名网站","slug":"hello","date":"2017-10-29T14:40:00.000Z","updated":"2018-01-08T06:31:32.568Z","comments":true,"path":"2017/10/29/hello/","link":"","permalink":"http://yoursite.com/2017/10/29/hello/","excerpt":"","text":"常用网站1.百度2.知乎3.github4.stackoverflow5.中国开源社区6.编码工具","categories":[],"tags":[{"name":"知名网站","slug":"知名网站","permalink":"http://yoursite.com/tags/知名网站/"}]}]}