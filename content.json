{"meta":{"title":"记录生活点滴","subtitle":"付出就会有收获","description":"人生苦短","author":"mino","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-01-09T10:07:39.000Z","updated":"2018-01-09T10:15:31.947Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-01-09T10:19:18.000Z","updated":"2018-01-09T10:21:31.302Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"linuxpythonnodeshellvuedocker"}],"posts":[{"title":"centos","slug":"centos1","date":"2018-01-08T08:37:05.000Z","updated":"2018-01-08T09:25:06.197Z","comments":true,"path":"2018/01/08/centos1/","link":"","permalink":"http://yoursite.com/2018/01/08/centos1/","excerpt":"","text":"centos上使用yum 命令时有下面的错误信息another app is currently holding the yum lock;waiting for it to exit 解决办法：可以强制关闭yum 进程rm -f /var/run/yum.pid 查看用yum安装的包yum list installed centos上检查某软件包是否已经安装1、rpm(RedHat Package Manager)包安装的，可以用rpm -qa看到，如果要查找某软件包是否安装，用 rpm -qa | grep “软件或者包的名字”。 2、以deb包安装的，可以用dpkg -l能看到。如果是查找指定软件包，用dpkg -l | grep “软件或者包的名字”； 3、yum方法安装的，可以用yum list installed查找，如果是查找指定包，命令后加 | grep “软件名或者包名”； 4、如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了，上面两种方法都看不到这种源码形式安装的包。如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。 附加： Linux rpm包集合 rpm使用","categories":[],"tags":[{"name":"centos yum","slug":"centos-yum","permalink":"http://yoursite.com/tags/centos-yum/"}]},{"title":"readme","slug":"readme","date":"2018-01-05T14:18:21.000Z","updated":"2018-01-08T08:06:01.864Z","comments":true,"path":"2018/01/05/readme/","link":"","permalink":"http://yoursite.com/2018/01/05/readme/","excerpt":"","text":"一.虚拟机1.检查操作系统CentOS 7.2 64位或 RHEL7.2 64位以上，选择标准化安装（不能用最小化安装）最小化安装时安装缺失的包（base\\web server\\kexec-tools） 2.检查yum源，如果没有进行配置 3.检查所有机器的root账号密码需要统一，建立sudo权限的非root账号密码 4.检查所有机器关闭防火墙 重启不失效 5.检查所有机器关闭selinux 并且保证重启后不失效 6.检查所有机器网卡名需要保持统一 7.检查所有机器的ipfowad4处于开启状态并且保证重启后不失效 8.检查部署机上是否上传了镜像，如果上传了镜像计算比对md5 9.所有机器配置有规律的主机名 如mw1-mw8 二.物理机虚拟机需要下面的额外检查： 1.检查是否配置好一个独立VLAN（检查这个VLAN里面除了网关，其它IP是否被占用）；检查这个VLAN要和物理机不在同一个VLAN，要跟里外物理机都能连通。 2.检查查看交换机配置，与服务器接口配置需为trunk口且允许物理机vlan和docker段vlan通过 3.物理服务器的网卡配置tag模式 具体详见下面说明 网络连通性的保证，如没有打tag，网络不通 Center OS 7.2 网卡配置VLAN TAG 3.1、确认内核是否已经载入802.1q模组: lsmod|grep 8021q，如果没有使用一下命令将模组载入内核：modprobe -a 8021q 3.2、vi打开/etc/sysconfig/network-scripts/ifcfg-bondX删除对应bond的IP和dns配置信息，保存 3.3、创建vlan网卡配置文件，(例如创建服务器网段vlan1199)：cp一个原bond网卡配置命名为bond0.1199，vi修改内容如下， 增加一行 VLAN=yes 修改DEVICE=bond0.1199 配置IP、掩码、网关 完成后重启网络 service network restart 查看vlan配置 cat /proc/net/vlan/config 有对应的dev name和vlanid即可 ping网络是否通，ping自身网关是否通，ping docker段vlan网关是否通，ping NTP服务器是否通。 4.检查物理机的磁盘不小于2.4TB，数据盘采用RAD10模式的磁盘阵列","categories":[],"tags":[{"name":"工具开发需求","slug":"工具开发需求","permalink":"http://yoursite.com/tags/工具开发需求/"}]},{"title":"pyexcept","slug":"pyexcept","date":"2017-11-11T14:18:21.000Z","updated":"2018-01-08T08:06:07.944Z","comments":true,"path":"2017/11/11/pyexcept/","link":"","permalink":"http://yoursite.com/2017/11/11/pyexcept/","excerpt":"","text":"为了增强程序的健壮性，管理运行时预见的错误—–异常1. 错误是程序不能执行 一般包括语法错误和逻辑错误 2. 异常是程序出现了错误，而在正常控制流以外采取的措施 - 异常处理的过程一般有两步，引发异常和处理异常 - 处理异常 一般是直接pass或者执行一场之后的逻辑 Python常见的异常 NameError 当调用一个没有定义的变量时解释器出现的异常&gt;&gt;&gt; a Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; NameError: name &apos;a&apos; is not defined ZeroDivisionError 除数为0的error SyntaxError Python解释器语法错误 indexError 序列的索引超标 keyError 字典的键问题，字典中不存在键 IOError 文件的异常，没有文件或者打开异常 AttributeError 属性异常对象中没有属性 ##异常的处理 try-except 如果try通过不执行except里面的逻辑 try-finally 不管try有没有通过都要执行finally里面的代码 try-except-finally try-except-else-finally 例子 返回浮点型def safe_float(obj): try: return float(obj) except ValueError, e: return &apos;ValueError&apos;, e except TypeError, e: return &apos;TypeError&apos;, e F:\\Python2\\python.exe F:/pycode/Error/handle_error.py (&apos;TypeError&apos;, TypeError(&apos;float() argument must be a string or a number&apos;,)) (&apos;ValueError&apos;, ValueError(&apos;could not convert string to float: xxxx&apos;,)) 捕获多处异常和异常参数def safe_float1(obj): try: return float(obj) except (TypeError, ValueError), dig: print type(dig) print dig return str(dig) &lt;type &apos;exceptions.TypeError&apos;&gt; float() argument must be a string or a number float() argument must be a string or a number","categories":[],"tags":[{"name":"异常处理","slug":"异常处理","permalink":"http://yoursite.com/tags/异常处理/"}]},{"title":"python启动定时任务","slug":"Timer","date":"2017-10-31T11:36:30.000Z","updated":"2018-01-08T06:31:32.560Z","comments":true,"path":"2017/10/31/Timer/","link":"","permalink":"http://yoursite.com/2017/10/31/Timer/","excerpt":"","text":"python启动定时任务1.time模块time.sleep(n)例如下面的例子1234def work(n): - 每隔n 秒 输出 1到10之间的一个数 for i in range(10): print i time.sleep(n) 上面的实例是阻塞的，在sleep的时间内程序一直堵塞详情请参考官方文档—–time.sleep 2.sched 模块1234567891011121314151617181920212223 1.导入sched模块 import sched---------------------------------------------------------------------------------- 2.创建scheduler对象 s = sched.scheduler(time.time, time.sleep) - time.time:返回时间戳的函数 - time.sleep:可以在定时未到达之前阻塞------------------------------------------------------------------------------------ 3.定义要执行的任务 def worker(n): pass------------------------------------------------------------------------------------- 4.将任务添加到scheduler的盒子中 s.enter(delay,priority,action,arguments) - delay:int /float型的表示多少秒后执行这个action任务 - priority:优先级表示当多个任务同时在一个时刻将执行优先执行那个任务 0优先级最高，数字越小优先级越高 - action: 执行的任务在上面的例子中也就是函数名worker - arguments:参数列表以元组的形式如：(n,) 如果没有参数传入直接传空括号()-------------------------------------------------------------------------------------- 5.运行任务 s.run() 在多线程环境中由于线程全局锁安全，一个任务没结束，就要等待也是阻塞的详细请查看官方库—-sched 3.threading.Timer()为了解决上面的阻塞问题，再多线程的环境中能够并发执行12345678910111213 1.导入模块 from threading import Timer---------------------------------------------------------------------------------------- 2.定义要执行的任务 def work(arg): pass---------------------------------------------------------------------------------------- 3.启动执行 Timer(delay, work, (arg)).start() - 不需要区分优先级可以同时执行任务delay相同时就同时执行任务 - delay:int /float型的表示多少秒后执行这个work任务 - work: 执行任务的方法名字 - arg:参数列表元祖(arg,)如果没有就是() 详情请参考官方文档：threading.Timer 4.更加高级的任务调度框架 apscheduler 官方文档 查看12345678910111213 1.导入模块 from apscheduler.schedulers.blocking import BlockingScheduler 2.初始化一个任务实例 sched = BlockingScheduler() 3.添加作业任务 sched.add_job(my_job, &apos;interval&apos;, seconds=5)- my_job：作业任务-‘ interval ’ ‘cron ’等等4.启动任务 sched.start()","categories":[],"tags":[{"name":"python启动定时任务","slug":"python启动定时任务","permalink":"http://yoursite.com/tags/python启动定时任务/"}]},{"title":"blue","slug":"blue","date":"2017-10-29T15:06:44.000Z","updated":"2018-01-08T10:24:18.568Z","comments":true,"path":"2017/10/29/blue/","link":"","permalink":"http://yoursite.com/2017/10/29/blue/","excerpt":"","text":"引入图片","categories":[],"tags":[{"name":"引入图片","slug":"引入图片","permalink":"http://yoursite.com/tags/引入图片/"}]},{"title":"知名网站","slug":"hello","date":"2017-10-29T14:40:00.000Z","updated":"2018-01-08T06:31:32.568Z","comments":true,"path":"2017/10/29/hello/","link":"","permalink":"http://yoursite.com/2017/10/29/hello/","excerpt":"","text":"常用网站1.百度2.知乎3.github4.stackoverflow5.中国开源社区6.编码工具","categories":[],"tags":[{"name":"知名网站","slug":"知名网站","permalink":"http://yoursite.com/tags/知名网站/"}]}]}