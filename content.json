{"meta":{"title":"think and code","subtitle":"no pains no gains","description":"人生苦短","author":"mino","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-01-09T10:19:18.000Z","updated":"2018-01-13T09:36:34.033Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"linuxpythonnodeshellvuedocker"},{"title":"process","date":"2018-01-22T06:23:43.000Z","updated":"2018-01-22T06:23:43.967Z","comments":true,"path":"process/index.html","permalink":"http://yoursite.com/process/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-01-09T10:07:39.000Z","updated":"2018-01-09T13:09:34.883Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"python单元测试-unittest","slug":"pythonunittest","date":"2018-06-09T02:42:00.000Z","updated":"2018-06-09T10:00:35.719Z","comments":true,"path":"2018/06/09/pythonunittest/","link":"","permalink":"http://yoursite.com/2018/06/09/pythonunittest/","excerpt":"","text":"python 单元测试 unittest的使用 一。什么是unittest1单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。 二。unittest的核心工作模块test case, test suite, test runner, test fixture。TextTestRunner,HTMLTestRunner(输出html的文件格式)123一个class继承了unittest.TestCase，便是一个测试用例，但如果其中有多个以 test 开头的方法，那么每有一个这样的方法，在load的时候便会生成一个TestCase实例，如：一个class中有四个test_xxx方法，最后在load到suite中时也有四个测试用例。 写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite我们通过命令行或者unittest.main()执行时，main会调用TextTestRunner中的run来执行，或者我们可以直接通过TextTestRunner来执行用例。这里加个说明，在Runner执行时，默认将执行结果输出到控制台，我们可以设置其输出到文件，在文件中查看结果（你可能听说过HTMLTestRunner，是的，通过它可以将结果输出到HTML中，生成漂亮的报告，它跟TextTestRunner是一样的，从名字就能看出来，这个我们后面再说）。 三。看下面的实例#!/usr/bin/env python # -*- coding:utf-8 -*- import unittest # unittest.TestCase # 测试的标识成功是 . 失败是 F ,跳过是s 出错是E def add(a,b): return a+b def minus(a,b): return a-b def multi(a,b): return a*b def divide(a,b): return a/b class IntegerArimeticTest(unittest.TestCase): &quot;&quot;&quot;docstring for IntegerArimeticTest&quot;&quot;&quot; def testAdd(self): &apos;&apos;&apos;test add function&apos;&apos;&apos; self.assertEqual(3,add(1,2)) def testminus(self): self.assertNotEqual(2,minus(4,1)) def testmulti(self): self.assertEqual(25,multi(5,5)) def testdivide(self): &apos;&apos;&apos;test divide function&apos;&apos;&apos; self.assertEqual(2,divide(5,2)) if __name__ == &apos;__main__&apos;: unittest.main(verbosity=2) # 会调用TextTestRunner中的run方法来运行testsuite 12341.测试的顺序不一定是按照类中定义的方法顺序2.类中的每个方法都要以test开头，否则不会被unittest类识别3.在unittest.main()中加 verbosity 参数可以控制输出的错误报告的详细程度，默认是 1，如果设为 0，则不输出每一用例的执行结果，4.类中的docstring是非常有用的，在测试过程中可以看到详细的测试方法。 四。组织testsuite123 上面的代码示例了如何编写一个简单的测试，但有两个问题，1.我们怎么控制用例执行的顺序呢？（这里的示例中的几个测试方法并没有一定关系，但之后你写的用例可能会有先后关系，需要先执行方法A，再执行方法B），我们就要用到TestSuite了。我们添加到TestSuite中的case是会按照添加的顺序执行的。 2.是我们现在只有一个测试文件，我们直接执行该文件即可，但如果有多个测试文件，怎么进行组织，总不能一个个文件执行吧，答案也在TestSuite中。 下面的代码： suit=unittest.TestSuite() tests=[IntegerArimeticTest(&quot;testAdd&quot;),IntegerArimeticTest(&quot;testminus&quot;),IntegerArimeticTest(&quot;testmulti&quot;),IntegerArimeticTest(&quot;testdivide&quot;)] suit.addTests(tests) runner=unittest.TextTestRunner(verbosity=2) runner.run(suit) 如果将测试用例加到Testsuit中那么执行的顺序就是按照加入的顺序执行的1上面用了TestSuite的 addTests() 方法，并直接传入了TestCase列表，我们还可以： # 直接用addTest方法添加单个TestCase suite.addTest(TestMathFunc(&quot;test_multi&quot;)) # 用addTests + TestLoader # loadTestsFromName()，传入&apos;模块名.TestCase名&apos; suite.addTests(unittest.TestLoader().loadTestsFromName(&apos;test_mathfunc.TestMathFunc&apos;)) suite.addTests(unittest.TestLoader().loadTestsFromNames([&apos;test_mathfunc.TestMathFunc&apos;])) # loadTestsFromNames()，类似，传入列表 # loadTestsFromTestCase()，传入TestCase suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) 用TestLoader的方法是无法对case进行排序的 五。将结果输出到文件 用例组织好了，但结果只能输出到控制台，这样没有办法查看之前的执行记录，我们想将结果输出到文件。很简单，看示例： suit=unittest.TestSuite() tests=[IntegerArimeticTest(&quot;testAdd&quot;),IntegerArimeticTest(&quot;testminus&quot;),IntegerArimeticTest(&quot;testmulti&quot;),IntegerArimeticTest(&quot;testdivide&quot;)] suit.addTests(tests) with open(&apos;UnittestTextReport.txt&apos;, &apos;a&apos;) as f: runner=unittest.TextTestRunner(stream=f,verbosity=2) runner.run(suit) runner=unittest.TextTestRunner(stream=f,verbosity=2)这个是关键。所有程序的执行均输出到此文件，接下来就有测试报告了。 六。test fixture之setUp() tearDown() 上面整个测试基本跑下来了，但可能会有点特殊情况。比如每次执行之前准备环境，或者在每次执行完成后进行清理。总不能每个方法都添加准备环境，清理环境的代码吧。这就涉及到之前的test fixture def setUp(self): print &quot;do something before test.Prepare environment.&quot; def tearDown(self): print &quot;do something after test.Clean up.&quot; 加入setUp和tearDown表示在执行每个测试用例之前与之后都要执行的操作 如果想要在所有的测试用例之前执行之前检查一次，在执行所有的用例之后执行一次就可使用下面的代码 @classmethod def setUpClass(cls): print &quot;firstly this setUpclass() only called once&quot; @classmethod def tearDownClass(cls): print &quot;finally:This tearDownClass() method only called once too.&quot; 七。跳过某个case如果我们临时想要跳过某个case,unittest也提供了几个方法1.skip装饰器 @unittest.skip(&quot;i do not want to run this case&quot;) def testdivide(self): print &quot;test divide&quot; &apos;&apos;&apos;test divide function&apos;&apos;&apos; self.assertEqual(2,divide(5,2)) self.assertEqual(1,divide(2,2)) 将会跳过这个测试用例执行下面的。但是还是可以看到总的skip数量 是 4个但都是divide被跳过了。skip装饰器一共有三个 unittest.skip(reason)、unittest.skipIf(condition, reason)、unittest.skipUnless(condition, reason)，skip无条件跳过，skipIf当condition为True时跳过，skipUn less当condition为False时跳过。 2.除了装饰器，也可以用skipTest() def testmulti(self): self.skipTest(&quot;do not run this&quot;) print &quot;test multi&quot; self.assertEqual(25,multi(5,5)) 也会跳过该case 八。用HTMLTestRunner输出漂亮的HTML报告 需要外部的库生成html的报告 http://tungwaiyip.info/software/HTMLTestRunner.html 下载后放到python/lib目录下面 或者放到当前文件夹下面 from HTMLTestRunner import * with open(&apos;HtmlReport.html&apos;, &apos;w&apos;) as f: runner=HTMLTestRunner(stream=f,title=&apos;MathFunc Test Report&apos;,description=&apos;generated by HTMLTestRunner.&apos;,verbosity=2) runner.run(suit) 将测试结果输出到html里面。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python自动化测试","slug":"python自动化测试","permalink":"http://yoursite.com/tags/python自动化测试/"}]},{"title":"Vue-初始","slug":"vue01","date":"2018-05-28T16:56:44.935Z","updated":"2018-06-09T10:02:45.868Z","comments":true,"path":"2018/05/29/vue01/","link":"","permalink":"http://yoursite.com/2018/05/29/vue01/","excerpt":"","text":"欢迎使用 vue Vue概述 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动 Vue是使用，引入。 可以使用cdn或者下载离线的vue &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt; 生产环境优化https://cdn.jsdelivr.net/npm/vue 使用场景 轻量级的web应用，视图和业务完全分离。响应式，组件化。可扩展性极强。 入门实例 声明式渲染 条件与循环12345678910 &lt;div id=&quot;app-3&quot;&gt; &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt; &lt;/div&gt; var app3 = new Vue(&#123; el: &apos;#app-3&apos;, data: &#123; seen: true &#125; &#125;) 处理用户输入 123456789101112131415 &lt;div id=&quot;app5&quot;&gt; &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;button v-on:click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt; &lt;/div&gt; var app5 = new Vue(&#123; el: &apos;#app-5&apos;, data: &#123; message: &apos;Hello Vue.js!&apos; &#125;, methods: &#123; reverseMessage: function () &#123; this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&#125;)","categories":[{"name":"前端（vue）","slug":"前端（vue）","permalink":"http://yoursite.com/categories/前端（vue）/"}],"tags":[{"name":"VUE","slug":"VUE","permalink":"http://yoursite.com/tags/VUE/"}]},{"title":"git,scp,rsync","slug":"short","date":"2018-05-28T02:32:00.000Z","updated":"2018-05-29T01:19:49.888Z","comments":true,"path":"2018/05/28/short/","link":"","permalink":"http://yoursite.com/2018/05/28/short/","excerpt":"","text":"常用的操作(git,scp,rsync) 查看系统的版本 win+R dixdiag 查看注册表 regedit 查看远程服务器scp -P22 10.100.0.21:/tmp /tmp 获取远程的文件到本地scp -P22 -r /tmp 10.100.0.21:/tmp 将本地的内容推到远程 rsync其中带有/查看目录里面的文件，不带/查看目录本身rsync 10.100.0.21:/tmp/ 列出远程服务器的文件内容rsync -a 10.100.0.21:/tmp/ 列出远程的文件夹 -a将会显示出所有的文件结构rsync /tmp /etc/tmp 本地同步 rsync -a /etc /tmp 这个命令会在/tmp目录创建etc目录rsync -a /etc/ /tmp 这个命令不会在/tmp 目录创建etc目录。git config –global user.namegit config –global user.email 生成公钥 ssh-keygen -t rsa -C “1527715645@qq.com” git 推送本地分支到远程git push origin feature:feature 查看本地分支 git branch查看远程分支 git branch -r 删除远程分支git push origin –delete 删除本地分支 git branch -d ##创建并且切换本地分支git checkout -b 分支名 创建切换本地分支git branch+git checkout","categories":[{"name":"git","slug":"git","permalink":"http://yoursite.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"python-shutil模块","slug":"file","date":"2018-04-27T15:29:25.503Z","updated":"2018-06-09T09:52:59.849Z","comments":true,"path":"2018/04/27/file/","link":"","permalink":"http://yoursite.com/2018/04/27/file/","excerpt":"","text":"高级文件操作模块-shutil 背景描述 os模块，已经提供了，对文件的基本的操作，比如对，文件的新建，移动，删除。绝对路径，父目录，文件夹。这些只是最基本的功能，但是并没有提供文件内容复制，压缩，打包，解压。shutil则是对os模块的扩展 shutil的基本方法介绍1.copy文件内容，到另外一个文件，可以指定拷贝文件的大小。 import shutil shutil.copyfileobj(fscrc,fdst,length) 其中fscrc,fdst均为文件对象，需要打开文件，才能进行复制，最后的length参数是可选的，指定复制文件内容的大小。 2.copy文件内容，上面的复制很麻烦，还需要自己手动打开文件。open函数打开，接下来看下面的方法。 import shutil shutil.copyfile(src,dst) src dst 均为文件名 这个dst文件不存在的话，就新建一个文件然后将src的内容写进去。如果存在直接覆盖dst文件的内容 3.copy文件权限，仅仅拷贝src的文件权限到dst import shutil shutil.copymod(src,dst) src,dst只能为文件 将文件src的权限直接copy到dst文件，如果dst文件不存在，就会报错。 让dst和src文件拥有相同的权限。 Traceback (most recent call last): File &quot;C:\\Users\\admin\\Desktop\\resource\\baseCode\\fileCore\\ handler.py&quot;, line 7, in &lt;module&gt; shutil.copymode(&apos;read1.txt&apos;,&apos;read4.txt&apos;) File &quot;D:\\python2.7\\lib\\shutil.py&quot;, line 91, in copymode os.chmod(dst, mode) WindowsError: [Error 2] : &apos;read4.txt&apos; 4.copy文件的所有信息，状态信息。包括权限，组，用户，信息。 import shutil shutil.copystat(src,dst) #包括文件的mtime ctime 5.copy 将文件复制到文件夹中 shutil.copy(file,dir) #该函数的返回值是复制成功后的字符串格式的文件路径 将file完全移动到dir目录中，只能复制单个文件到指定的路径中。如果后面是文件名，那么dir将会被当成复制后的文件名称。 6.递归复制文件夹中的内容到指定的目录 shutil.copytree(src,dir) #将src里面的文件夹里的所有的文件及其子目录的内容递归复制到 目标目录。 注意，如果 destination 文件夹已经存在，该操作并返回一个 FileExistsError 错误，提示文件已存在。即表示，如果执行了该函数，程序会自动创建一个新文件夹（destination参数）并将 source 文件夹中的内容复制过去 7.删除文件夹里面的所有内容 shutil.rmtree(path) #删除path目录下的所有东西。 上面的删除要特别注意可以用字符串的endwith()属性来判断。 结论对于文件和文件夹的操作，最好是os和shutil来结合使用，会达到最佳的效果奥。。。。加油！！！！！也可以参阅官方文档 shutil-doc os-doc","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"文件操作-shutil高级模块","slug":"文件操作-shutil高级模块","permalink":"http://yoursite.com/tags/文件操作-shutil高级模块/"}]},{"title":"装饰器","slug":"Decorator","date":"2018-04-03T14:01:00.000Z","updated":"2018-04-04T08:19:58.726Z","comments":true,"path":"2018/04/03/Decorator/","link":"","permalink":"http://yoursite.com/2018/04/03/Decorator/","excerpt":"","text":"python装饰器 前言一个形象的比喻内衣是我们都需要穿的，但是冬天我们需要穿棉衣。装饰器就像我们的棉衣一样，在不影响内衣的作用条件下，给我们提供保暖的功能。 装饰器的本质装饰器本质上就是一个python函数，它可以让其它的函数在不需要做任何代码变动的前提下增加额外的功能。装饰器的返回值也是一个函数对象。 装饰器的使用场景经常使用在有切面需求的场景里面。比如最简单的插入日志，性能测试，事物处理，缓存和权限校验等场景。装饰器是解决这类问题的绝佳设计。 装饰器的作用有了装饰器，就可以抽离出大量的与函数功能本身无关的雷同代码并继续重用，装饰器的作用就是为已经存在的对象添加额外的功能。 ###使用实例 先来看一个最简单的例子 def foo(): print (&apos;i am fool&apos;) 现在有一个新的需求，希望能记录下上面函数的运行日志，于是在代码中添加一行日志代码： def foo(): print (&apos;i am fool&apos;) logging.info(&apos;fool is running&apos;) 如果其他的函数也有类似的需求bar(),bar1() 怎么做？再写logging吗，这样就造成大量雷同的代码，为了减少重复写代码，我们可以这样做，专门写一个日志处理的函数，处理日志，日志处理完成之后，在进行相应的逻辑。 def use_logging(func): logging.warn(&apos;%s is running &apos;%func.__name__) func() def bar(): print (&apos;i am bar &apos;) use_logging(bar) 逻辑上不难理解，但是这样每次我们都需要将一个函数作为参数传递给use_logging()而且这种方式已经破坏了原有代码的逻辑结构。之前的逻辑是运行bar，现在不得不运行use_logging(bar)那么有没有更好的方式呢，当然是装饰器。简单的装饰器 def use_logging(func): def wrapper(*args,**kargs): logging.warn(&apos;%s is running&apos;%func.__name__) return func(*args,**kargs) return wrapper def bar(): print (&apos;i am bar&apos;) bar=use_logging(bar) bar() 函数use_logging就是装饰器，它把执行真正业务方法的func包裹在函数里面，看起来bar被use_logging装饰了，在这个例子中，函数进入和退出是成为一个横切面，这种编程模式称为面向切面的编程。 @符号称为装饰器的语法糖，在定义函数的时候使用，避免再一次赋值操作。比如真正的函数调用bar1要使用装饰器use_logging可以写成下面的方式 @use_logging def bar1(): print &apos;i am bar1&apos; 这样先执行装饰器，然后是真实的逻辑代码。如上面我们就省去了定义bar=use_logging(bar1),如果其它的函数也要调用装饰器直接@use_logging就可以。不用修改函数或者增加新的封装。这样我们就提高了程序的可重复利用性，增加了程序的可读性。 装饰器在python中使用方便都要归因于python的函数能像普通的对象一样能作为参数传递给其他函数，可以被赋值给其他变量，可以作为返回值，可以定义在一个函数内。 带参数的装饰器 装饰器还有更大的灵活性，例如带参数的装饰器：在上面的装饰器中 ，比如@use_logging该装饰器唯一的参数就是执行业务的函数。装饰器的语法允许我们在调用时提供其他参数比如@decorator(a).这样为装饰器的编写和使用提供了更大的灵活性。 def use_logging(level): def decorator(func): def warpper(*args,**kargs): if level==&apos;warn&apos;: logging.warn(&apos;%sis running&apos;%func.__name__) return func(*args) return warpper return decorator @use_logging(level=&apos;warn&apos;) def foo(name=&apos;fool&apos;): print &apos;i am fool&apos; foo() 上面的use_logging是一个带有参数的装饰器实际上是对原有装饰器的一个函数的封装，并返回一个装饰器，我们可以理解为含有一个参数的闭包当我们使用@use_logging(level=&apos;warn&apos;)调用的时候，python能够发现这一层的封装，并把参数传递到装饰器的参数中。 类装饰器 再来看看类装饰器，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器还可以依靠类内部的__call__方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。 class Foo(object): &apos;&apos;&apos; class decorator&apos;&apos;&apos; def __init__(self, func): self._func = func def __call__(self): print &apos;class decorator running&apos; self._func() print &apos;class decorator ending @Foo def bar(): print &apos;bar&apos; bar() functools.wraps 使用装饰器极大的复用代码，但是他有一个缺点就是函数的原信息不见了比如函数的docstring name 参数列表 看看下面的例子 def logged(func): def with_logged(*args,**kargs): print func.__name__+&quot;was called&quot; return func(*args,**kargs) return with_logged @logged def f(x): return x+x*x 该函数完全等价于 def f(x): return x+x*x f=logged(f) print f.__name__ # with_logged print f.__doc__ # None #这个问题比较严重，好在我们有functools.wraps,wraps本身也是一个装饰器，它能把原函数的元信息，拷贝到装饰函数中，这使得装饰器函数也和原函数有着一样的原信息。 from functools import wraps def loggds(func): @wraps(func) def with_loggd(*args, **kwargs): print func.__name__ + &apos;was called&apos; return func(*args, **kwargs) return with_loggd def f(x): &apos;do some thing&apos; return x + x * x f2 = loggds(f) print f2.__name__ # f print f2.__doc__ # do some thing 保持了原有信息。 内置装饰器 @staticmathod、@classmethod、@property @a @b @c def f (): 装饰器的顺序等效于 f = a(b(c(f))) [参考链接][http://book42qu.readthedocs.io/en/latest/python/python-closures-and-decorators.html]","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"装饰器的使用","slug":"装饰器的使用","permalink":"http://yoursite.com/tags/装饰器的使用/"}]},{"title":"process for python","slug":"process","date":"2018-01-22T06:23:43.000Z","updated":"2018-04-04T08:50:08.589Z","comments":true,"path":"2018/01/22/process/","link":"","permalink":"http://yoursite.com/2018/01/22/process/","excerpt":"","text":"多进程—basepython中的多线程其实并不是真正的多线程，如果想要充分地使用多核CPU的资源，在python中大部分情况需要使用多进程。Python提供了非常好用的多进程包multiprocessing，只需要定义一个函数，Python会完成其他所有事情。借助这个包，可以轻松完成从单进程到并发执行的转换。multiprocessing支持子进程、通信和共享数据、执行不同形式的同步，提供了Process、Queue、Pipe、Lock等组件。 1.请看下面的代码实例： import sys reload(sys) sys.setdefaultencoding(&quot;utf-8&quot;) from multiprocessing import Process import os import time def task(name): print &quot;child process name is %s with process_id is %s start&quot;%(name,os.getpid()) time.sleep(2) print &quot;child process name is %s with process_id is %s end&quot;%(name,os.getpid()) if __name__ == &apos;__main__&apos;: print &apos;Parent process_id is %s&apos;%os.getpid() # start child process p=Process(target=task,args=(&apos;mino&apos;,)) print &quot;process start&quot; p.start() p.join() # main process wait childprocess print &quot;process end&quot; 其实上面的代码要做任务是获取进程的pid然后休眠2秒再打印出进程的pid.主方法中除了有主进程之外，还new了一个新的进程。让新的进程去处理任务。主进程首先获取到主进程的pid然后再执行子进程。p.join()方法是主进程必须等待子进程执行完毕，才能继续执行下面的代码。 2.接着看下面的实例，创建进程池的逻辑。 # -*-coding:utf-8 -*- import sys reload(sys) sys.setdefaultencoding(&quot;utf-8&quot;) import os,time from multiprocessing import Pool def task(name,time_sleep): print &quot;child process name is %s with p_id is %s start&quot;%(name,os.getpid()) time.sleep(time_sleep) print &quot;child process name is %s with p_id is %s end&quot;%(name,os.getpid()) if __name__ == &apos;__main__&apos;: print &quot;parent_processId is %s&quot;%os.getpid() # create process pool p=Pool(4) # 2 6.2 3 5.3 4 4.2 for i in xrange(5): # apply_task for pool p.apply_async(task,args=(&quot;mino&quot;+str(i),i)) print &quot;child process are running&quot; p.close() p.join() print &quot;all process end&quot; 利用进程池可以一次性创建多个进程。p=Pool()是创建进程池的方法。p.apply_async()是给每个进程附件异步执行的方法。这里是创建4个进程的容器，每个子进程执行的任务都是获取打印进程的pid然后休眠几秒再打印子进程的pid.主进程等待子进程都执行完毕之后，再去执行后面的逻辑。 3.接着请看下面的逻辑创建读写队列和进程锁 --coding:utf-8 --import sys reload(sys) sys.setdefaultencoding(&apos;utf-8&apos;) from multiprocessing import Process,Queue,Lock import time,os,random def write(q,lock,name): print &apos;child process %s start&apos;%name #acquire lock lock.acquire() for data in [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;]: print &apos;put value %s to queen&apos;%data q.put(data) time.sleep(random.random()) #release lock lock.release() print &apos;child process %s end&apos;%name def read(q,lock,name): print &quot;read process %s start&quot;%name while True: value=q.get() #print value print &apos;get vlue %s from queue&apos;%value print &quot;read process %s end&quot;%name if __name__ == &apos;__main__&apos;: lock=Lock() q=Queue() pwiter=Process(target=write,args=(q,lock,&apos;write&apos;)) pread=Process(target=read,args=(q,lock,&apos;read&apos;)) pwiter.start() pread.start() pwiter.join() pread.terminate() print &quot;main process finish&quot; 主进程首先创建全局变量lock,和queue,然后创建写和读的进程。当子进程再写入内容填，必须加锁，保证同一时间只能有一个进程操作写的动作。将数据放入队列之后.释放锁。而负责读的进程从队列中读取数据，读进程是不需要加锁的，直接再队列中取数据。读写进程都执行完之后（读进程不会终止，需要调用pread.tearminate()才能终止），接着执行下面的逻辑。 参考内容 subprocess官方模块 python单进程与多进程效率的对比","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"多进程","slug":"多进程","permalink":"http://yoursite.com/tags/多进程/"}]},{"title":"md操作","slug":"index","date":"2018-01-13T09:14:56.000Z","updated":"2018-04-04T09:53:21.020Z","comments":true,"path":"2018/01/13/index/","link":"","permalink":"http://yoursite.com/2018/01/13/index/","excerpt":"","text":"欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[^LaTeX]$$E=mc^2$$ 3. 高亮一段代码[^code]1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ 作者 @ghosert2016 年 07月 07日 [^LaTeX]: 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 [^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。","categories":[{"name":"tool","slug":"tool","permalink":"http://yoursite.com/categories/tool/"}],"tags":[]},{"title":"centos","slug":"centos1","date":"2018-01-08T08:37:05.000Z","updated":"2018-04-04T08:53:08.346Z","comments":true,"path":"2018/01/08/centos1/","link":"","permalink":"http://yoursite.com/2018/01/08/centos1/","excerpt":"","text":"centos上使用yum 命令时有下面的错误信息another app is currently holding the yum lock;waiting for it to exit 解决办法：可以强制关闭yum 进程rm -f /var/run/yum.pid 查看用yum安装的包yum list installed centos上检查某软件包是否已经安装1、rpm(RedHat Package Manager)包安装的，可以用rpm -qa看到，如果要查找某软件包是否安装，用 rpm -qa | grep “软件或者包的名字”。 2、以deb包安装的，可以用dpkg -l能看到。如果是查找指定软件包，用dpkg -l | grep “软件或者包的名字”； 3、yum方法安装的，可以用yum list installed查找，如果是查找指定包，命令后加 | grep “软件名或者包名”； 4、如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了，上面两种方法都看不到这种源码形式安装的包。如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。 附加： Linux rpm包集合 rpm使用","categories":[{"name":"RedHat","slug":"RedHat","permalink":"http://yoursite.com/categories/RedHat/"}],"tags":[{"name":"centos yum","slug":"centos-yum","permalink":"http://yoursite.com/tags/centos-yum/"}]},{"title":"readme","slug":"readme","date":"2018-01-05T14:18:21.000Z","updated":"2018-04-04T08:57:07.178Z","comments":true,"path":"2018/01/05/readme/","link":"","permalink":"http://yoursite.com/2018/01/05/readme/","excerpt":"","text":"一.虚拟机1.检查操作系统CentOS 7.2 64位或 RHEL7.2 64位以上，选择标准化安装（不能用最小化安装）最小化安装时安装缺失的包（base\\web server\\kexec-tools） 2.检查yum源，如果没有进行配置 3.检查所有机器的root账号密码需要统一，建立sudo权限的非root账号密码 4.检查所有机器关闭防火墙 重启不失效 5.检查所有机器关闭selinux 并且保证重启后不失效 6.检查所有机器网卡名需要保持统一 7.检查所有机器的ipfowad4处于开启状态并且保证重启后不失效 8.检查部署机上是否上传了镜像，如果上传了镜像计算比对md5 9.所有机器配置有规律的主机名 如mw1-mw8 二.物理机虚拟机需要下面的额外检查： 1.检查是否配置好一个独立VLAN（检查这个VLAN里面除了网关，其它IP是否被占用）；检查这个VLAN要和物理机不在同一个VLAN，要跟里外物理机都能连通。 2.检查查看交换机配置，与服务器接口配置需为trunk口且允许物理机vlan和docker段vlan通过 3.物理服务器的网卡配置tag模式 具体详见下面说明 网络连通性的保证，如没有打tag，网络不通 Center OS 7.2 网卡配置VLAN TAG 3.1、确认内核是否已经载入802.1q模组: lsmod|grep 8021q，如果没有使用一下命令将模组载入内核：modprobe -a 8021q 3.2、vi打开/etc/sysconfig/network-scripts/ifcfg-bondX删除对应bond的IP和dns配置信息，保存 3.3、创建vlan网卡配置文件，(例如创建服务器网段vlan1199)：cp一个原bond网卡配置命名为bond0.1199，vi修改内容如下， 增加一行 VLAN=yes 修改DEVICE=bond0.1199 配置IP、掩码、网关 完成后重启网络 service network restart 查看vlan配置 cat /proc/net/vlan/config 有对应的dev name和vlanid即可 ping网络是否通，ping自身网关是否通，ping docker段vlan网关是否通，ping NTP服务器是否通。 4.检查物理机的磁盘不小于2.4TB，数据盘采用RAD10模式的磁盘阵列","categories":[{"name":"tool","slug":"tool","permalink":"http://yoursite.com/categories/tool/"}],"tags":[{"name":"工具开发需求","slug":"工具开发需求","permalink":"http://yoursite.com/tags/工具开发需求/"}]},{"title":"pyexcept","slug":"pyexcept","date":"2017-11-11T14:18:21.000Z","updated":"2018-04-04T08:47:35.870Z","comments":true,"path":"2017/11/11/pyexcept/","link":"","permalink":"http://yoursite.com/2017/11/11/pyexcept/","excerpt":"","text":"为了增强程序的健壮性，管理运行时预见的错误—–异常1. 错误是程序不能执行 一般包括语法错误和逻辑错误 2. 异常是程序出现了错误，而在正常控制流以外采取的措施 - 异常处理的过程一般有两步，引发异常和处理异常 - 处理异常 一般是直接pass或者执行一场之后的逻辑 Python常见的异常 NameError 当调用一个没有定义的变量时解释器出现的异常&gt;&gt;&gt; a Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; NameError: name &apos;a&apos; is not defined ZeroDivisionError 除数为0的error SyntaxError Python解释器语法错误 indexError 序列的索引超标 keyError 字典的键问题，字典中不存在键 IOError 文件的异常，没有文件或者打开异常 AttributeError 属性异常对象中没有属性 ##异常的处理 try-except 如果try通过不执行except里面的逻辑 try-finally 不管try有没有通过都要执行finally里面的代码 try-except-finally try-except-else-finally 例子 返回浮点型def safe_float(obj): try: return float(obj) except ValueError, e: return &apos;ValueError&apos;, e except TypeError, e: return &apos;TypeError&apos;, e F:\\Python2\\python.exe F:/pycode/Error/handle_error.py (&apos;TypeError&apos;, TypeError(&apos;float() argument must be a string or a number&apos;,)) (&apos;ValueError&apos;, ValueError(&apos;could not convert string to float: xxxx&apos;,)) 捕获多处异常和异常参数def safe_float1(obj): try: return float(obj) except (TypeError, ValueError), dig: print type(dig) print dig return str(dig) &lt;type &apos;exceptions.TypeError&apos;&gt; float() argument must be a string or a number float() argument must be a string or a number","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"异常处理","slug":"异常处理","permalink":"http://yoursite.com/tags/异常处理/"}]},{"title":"python启动定时任务","slug":"Timer","date":"2017-10-31T11:36:30.000Z","updated":"2018-04-04T08:50:25.145Z","comments":true,"path":"2017/10/31/Timer/","link":"","permalink":"http://yoursite.com/2017/10/31/Timer/","excerpt":"","text":"python启动定时任务1.time模块time.sleep(n)例如下面的例子1234def work(n): - 每隔n 秒 输出 1到10之间的一个数 for i in range(10): print i time.sleep(n) 上面的实例是阻塞的，在sleep的时间内程序一直堵塞详情请参考官方文档—–time.sleep 2.sched 模块1234567891011121314151617181920212223 1.导入sched模块 import sched---------------------------------------------------------------------------------- 2.创建scheduler对象 s = sched.scheduler(time.time, time.sleep) - time.time:返回时间戳的函数 - time.sleep:可以在定时未到达之前阻塞------------------------------------------------------------------------------------ 3.定义要执行的任务 def worker(n): pass------------------------------------------------------------------------------------- 4.将任务添加到scheduler的盒子中 s.enter(delay,priority,action,arguments) - delay:int /float型的表示多少秒后执行这个action任务 - priority:优先级表示当多个任务同时在一个时刻将执行优先执行那个任务 0优先级最高，数字越小优先级越高 - action: 执行的任务在上面的例子中也就是函数名worker - arguments:参数列表以元组的形式如：(n,) 如果没有参数传入直接传空括号()-------------------------------------------------------------------------------------- 5.运行任务 s.run() 在多线程环境中由于线程全局锁安全，一个任务没结束，就要等待也是阻塞的详细请查看官方库—-sched 3.threading.Timer()为了解决上面的阻塞问题，再多线程的环境中能够并发执行12345678910111213 1.导入模块 from threading import Timer---------------------------------------------------------------------------------------- 2.定义要执行的任务 def work(arg): pass---------------------------------------------------------------------------------------- 3.启动执行 Timer(delay, work, (arg)).start() - 不需要区分优先级可以同时执行任务delay相同时就同时执行任务 - delay:int /float型的表示多少秒后执行这个work任务 - work: 执行任务的方法名字 - arg:参数列表元祖(arg,)如果没有就是() 详情请参考官方文档：threading.Timer 4.更加高级的任务调度框架 apscheduler 官方文档 查看12345678910111213 1.导入模块 from apscheduler.schedulers.blocking import BlockingScheduler 2.初始化一个任务实例 sched = BlockingScheduler() 3.添加作业任务 sched.add_job(my_job, &apos;interval&apos;, seconds=5)- my_job：作业任务-‘ interval ’ ‘cron ’等等4.启动任务 sched.start()","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"python启动定时任务","slug":"python启动定时任务","permalink":"http://yoursite.com/tags/python启动定时任务/"}]},{"title":"blue","slug":"blue","date":"2017-10-29T15:06:44.000Z","updated":"2018-04-27T15:35:28.343Z","comments":true,"path":"2017/10/29/blue/","link":"","permalink":"http://yoursite.com/2017/10/29/blue/","excerpt":"","text":"引入图片","categories":[{"name":"tool","slug":"tool","permalink":"http://yoursite.com/categories/tool/"}],"tags":[{"name":"引入图片","slug":"引入图片","permalink":"http://yoursite.com/tags/引入图片/"}]},{"title":"知名网站","slug":"hello","date":"2017-10-29T14:40:00.000Z","updated":"2018-01-08T06:31:32.568Z","comments":true,"path":"2017/10/29/hello/","link":"","permalink":"http://yoursite.com/2017/10/29/hello/","excerpt":"","text":"常用网站1.百度2.知乎3.github4.stackoverflow5.中国开源社区6.编码工具","categories":[],"tags":[{"name":"知名网站","slug":"知名网站","permalink":"http://yoursite.com/tags/知名网站/"}]}]}